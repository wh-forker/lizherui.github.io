<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>lizherui的程序世界</title><link>http://www.lizherui.com/</link><description></description><atom:link href="http://www.lizherui.com/feeds/tech.rss.xml" rel="self"></atom:link><lastBuildDate>Sun, 25 May 2014 00:00:00 +0800</lastBuildDate><item><title>Git历险记</title><link>http://www.lizherui.com/pages/2014/05/25/a_git_adventure.html</link><description>&lt;p&gt;Git, beautiful software.&lt;/p&gt;
&lt;p&gt;很多SVN使用者刚刚转到Git时，都会为Git独特的使用方式感到疑惑，尤其是Git大名鼎鼎的分布式思想、随时随地的本机开发、独一无二的暂存区、难以置信的轻量级分支、无处不在的fork。&lt;/p&gt;
&lt;p&gt;这些都让Git显得如此与众不同，&lt;/p&gt;
&lt;p&gt;当很多人从一个软件迁移到另一个软件并不再回头的时候，就值得我们注意了。&lt;/p&gt;
&lt;p&gt;这说明另一个软件&lt;strong&gt;更好用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;当我们说某个软件更好用的时候，这意味着以下几个问题：为什么很多人都说它好用？具体好用在哪里？它的内部究竟是怎样设计的？为什么要这样设计？&lt;/p&gt;
&lt;p&gt;带着这些疑惑，让我们走进Git内部的神秘世界。&lt;/p&gt;
&lt;h2&gt;Git对象&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;每一位git使用者，都会不由自主地思考这样一件事情：git究竟是怎么存储每个文件和提交历史的？&lt;/p&gt;
&lt;h3&gt;Blob对象&lt;/h3&gt;
&lt;p&gt;我们在本地新建一个git仓库&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git init learn-git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;会发生该目录下多了一个.git文件夹，进去后长这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="na"&gt;.git&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;|--&lt;/span&gt; &lt;span class="nf"&gt;HEAD&lt;/span&gt;
&lt;span class="err"&gt;|--&lt;/span&gt; &lt;span class="nf"&gt;config&lt;/span&gt;
&lt;span class="err"&gt;|--&lt;/span&gt; &lt;span class="nf"&gt;description&lt;/span&gt;
&lt;span class="err"&gt;|--&lt;/span&gt; &lt;span class="nf"&gt;hooks&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;   &lt;span class="err"&gt;|--&lt;/span&gt; &lt;span class="nf"&gt;applypatch-msg.sample&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;   &lt;span class="err"&gt;|--&lt;/span&gt; &lt;span class="nf"&gt;commit-msg.sample&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;   &lt;span class="err"&gt;|--&lt;/span&gt; &lt;span class="nf"&gt;post-commit.sample&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;   &lt;span class="err"&gt;|--&lt;/span&gt; &lt;span class="nf"&gt;post-receive.sample&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;   &lt;span class="err"&gt;|--&lt;/span&gt; &lt;span class="nf"&gt;post-update.sample&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;   &lt;span class="err"&gt;|--&lt;/span&gt; &lt;span class="nf"&gt;pre-applypatch.sample&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;   &lt;span class="err"&gt;|--&lt;/span&gt; &lt;span class="nf"&gt;pre-commit.sample&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;   &lt;span class="err"&gt;|--&lt;/span&gt; &lt;span class="nf"&gt;pre-rebase.sample&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;   &lt;span class="err"&gt;|--&lt;/span&gt; &lt;span class="nf"&gt;prepare-commit-msg.sample&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;   &lt;span class="err"&gt;|--&lt;/span&gt; &lt;span class="nf"&gt;update.sample&lt;/span&gt;
&lt;span class="err"&gt;|--&lt;/span&gt; &lt;span class="nf"&gt;info&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;   &lt;span class="err"&gt;|--&lt;/span&gt; &lt;span class="nf"&gt;exclude&lt;/span&gt;
&lt;span class="err"&gt;|--&lt;/span&gt; &lt;span class="nf"&gt;objects&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;   &lt;span class="err"&gt;|--&lt;/span&gt; &lt;span class="nf"&gt;info&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;   &lt;span class="err"&gt;|--&lt;/span&gt; &lt;span class="nf"&gt;pack&lt;/span&gt;
&lt;span class="err"&gt;|--&lt;/span&gt; &lt;span class="nf"&gt;refs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;description文件仅供GitWeb使用，不用关心它。&lt;/li&gt;
&lt;li&gt;config文件包含了项目特有的配置选项，如最常用的用户名和邮箱。&lt;/li&gt;
&lt;li&gt;info目录保存了一份不希望在 .gitignore 文件中管理的忽略模式 (ignored patterns) 的全局可执行文件。这个用得比较少，也不用太关心。&lt;/li&gt;
&lt;li&gt;hooks目录保存了客户端或服务端钩子脚本，一般我们都是用默认的，很少改，也不用太关心。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，我们需要重点关心另外四个重要的文件或目录：HEAD和index文件，objects和refs目录，因为它们是Git的核心：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;objects 目录存储所有数据内容。&lt;/li&gt;
&lt;li&gt;refs 目录存储指向数据 (分支) 的提交对象的指针。&lt;/li&gt;
&lt;li&gt;HEAD 文件指向当前分支。&lt;/li&gt;
&lt;li&gt;index 文件保存了暂存区域信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来，我们新建一个文件1.txt，内容为1，并把它加入暂存区&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;➜ echo 1 &amp;gt; 1.txt
➜ git add 1.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;于是我们发现.git目录下多了2个文件，且内容都为字节码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="na"&gt;.git&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;|--&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;
&lt;span class="err"&gt;|--&lt;/span&gt; &lt;span class="nf"&gt;objects&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;   &lt;span class="err"&gt;|--&lt;/span&gt; &lt;span class="nf"&gt;d0&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;   &lt;span class="err"&gt;|&lt;/span&gt;   &lt;span class="err"&gt;|--&lt;/span&gt; &lt;span class="err"&gt;0491&lt;/span&gt;&lt;span class="nf"&gt;fd7e5bb6fa28c517a0bb32b8b506539d4d&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用如下命令查看1.txt的hash值&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;➜ git hash-object 1.txt
d00491fd7e5bb6fa28c517a0bb32b8b506539d4d
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们发现结果的前2位是文件夹的名字，后38位是文件的名字。&lt;/p&gt;
&lt;p&gt;其实0491fd7e5bb6fa28c517a0bb32b8b506539d4d这个文件是用zlib压缩的，我们用Python解压一下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;zlib&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;zlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decompress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.git/objects/d0/0491fd7e5bb6fa28c517a0bb32b8b506539d4d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;blob 2&lt;/span&gt;&lt;span class="se"&gt;\x00&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;反向验证一下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hashlib&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;blob 2&lt;/span&gt;&lt;span class="se"&gt;\x00&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;d00491fd7e5bb6fa28c517a0bb32b8b506539d4d&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;即git使用'blob ' + len(content) + '\0' + content作为文件内容，其sha1值的前2位作为文件夹名，后38位作为文件名。 &lt;/p&gt;
&lt;p&gt;这就是git blob对象的奥秘。&lt;/p&gt;
&lt;p&gt;下面瞅瞅index文件，查看index文件的内容可以用这个命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;➜ git ls-files --stage
100644 d00491fd7e5bb6fa28c517a0bb32b8b506539d4d 0 1.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;依次为文件的访问权限、文件sha1值、版本号、文件名。&lt;/p&gt;
&lt;p&gt;index文件并不像blob文件那样简单的用zlib压缩，而是基于一个稍许复杂的协议，在github上可以找到：&lt;a href="https://github.com/git/git/blob/master/Documentation/technical/index-format.txt"&gt;https://github.com/git/git/blob/master/Documentation/technical/index-format.txt&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;github上也有一个用来解析index的Python3程序gin：&lt;a href="https://github.com/sbp/gin"&gt;https://github.com/sbp/gin&lt;/a&gt;，核心思路在于按协议依次读入字节时先把网络序转化为主机序，再按格式把字节流转化成字符串。&lt;/p&gt;
&lt;p&gt;解析的结果如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[header]&lt;/span&gt;
  &lt;span class="na"&gt;signature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;DIRC&lt;/span&gt;
&lt;span class="s"&gt;  version = 2&lt;/span&gt;
&lt;span class="s"&gt;  entries = 1&lt;/span&gt;

&lt;span class="k"&gt;[entry]&lt;/span&gt;
  &lt;span class="na"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="s"&gt;  ctime = 1401014438.0&lt;/span&gt;
&lt;span class="s"&gt;  mtime = 1401014438.0&lt;/span&gt;
&lt;span class="s"&gt;  dev = 16777218&lt;/span&gt;
&lt;span class="s"&gt;  ino = 134288315&lt;/span&gt;
&lt;span class="s"&gt;  mode = 100644&lt;/span&gt;
&lt;span class="s"&gt;  uid = 501&lt;/span&gt;
&lt;span class="s"&gt;  gid = 20&lt;/span&gt;
&lt;span class="s"&gt;  size = 2&lt;/span&gt;
&lt;span class="s"&gt;  sha1 = d00491fd7e5bb6fa28c517a0bb32b8b506539d4d&lt;/span&gt;
&lt;span class="s"&gt;  flags = 5&lt;/span&gt;
&lt;span class="s"&gt;  assume-valid = False&lt;/span&gt;
&lt;span class="s"&gt;  extended = False&lt;/span&gt;
&lt;span class="s"&gt;  stage = (False, False)&lt;/span&gt;
&lt;span class="s"&gt;  name = 1.txt&lt;/span&gt;

&lt;span class="k"&gt;[extension]&lt;/span&gt;
  &lt;span class="na"&gt;extension&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="s"&gt;  signature = TREE&lt;/span&gt;
&lt;span class="s"&gt;  size = 25&lt;/span&gt;
&lt;span class="s"&gt;  data = &amp;quot;\u00001 0\n8\u00fd)i{\&amp;quot;\u000f~L\u00a1[\u0004L2\&amp;quot;\u00ee\u00feZ\u00fd\u00c1&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;[checksum]&lt;/span&gt;
  &lt;span class="na"&gt;checksum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;True&lt;/span&gt;
&lt;span class="s"&gt;  sha1 = ffebb80862254fef8c72af2acfa6ac035d98f5dd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Tree对象和Commit对象&lt;/h3&gt;
&lt;p&gt;现在我们提交一次：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git commit -m &amp;#39;first ci&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;objects目录下多了两个文件，查看一下内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;➜ git cat-file -p 38fd29697b220f7e4ca15b044c3222eefe5afdc1
100644 blob d00491fd7e5bb6fa28c517a0bb32b8b506539d4d 1.txt
➜ git cat-file -p 844d93360ba0083ae4a6e911887a569892cb5102
tree 38fd29697b220f7e4ca15b044c3222eefe5afdc1
author lizherui &amp;lt;lzrak47m4a1@gmail.com&amp;gt; 1401017562 +0800
committer lizherui &amp;lt;lzrak47m4a1@gmail.com&amp;gt; 1401017562 +0800

first ci
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;即生成了一个tree对象和一个commit对象：commit对象指向这个tree对象，这个tree对象指向1.txt文件。&lt;/p&gt;
&lt;p&gt;这个tree对象可以认为是.git文件夹所在的目录，即根目录，类似unix文件系统中的"/"。&lt;/p&gt;
&lt;p&gt;我们新建一个文件dir，在里面建一个新文件2.txt，并提交：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir dir
cd dir &amp;amp;&amp;amp; echo 2 &amp;gt; 2.txt
git commit -am &amp;#39;second ci&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看一下第二次提交：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;➜ git cat-file -p b2b2ec533fbfe31801fc5571e812ac6a3bd9e46d
tree 80ab0595bc80fab8778b3c5011c49bf7ea475241
parent 844d93360ba0083ae4a6e911887a569892cb5102
author lizherui &amp;lt;lzrak47m4a1@gmail.com&amp;gt; 1401018309 +0800
committer lizherui &amp;lt;lzrak47m4a1@gmail.com&amp;gt; 1401018309 +0800

second ci
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;整个看起来像是这样：&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="https://lh6.googleusercontent.com/-hgr8Hbh5KQM/U4HapRamrKI/AAAAAAAAAgk/pUxyLw9wwAM/w769-h367-no/Screen+Shot+2014-05-25+at+19.54.42.png" /&gt;&lt;/p&gt;
&lt;p&gt;这就是git的对象系统，本质上是一个key-value的内容寻址文件系统。&lt;/p&gt;
&lt;p&gt;我们发现git为每个文件都存储了快照，而不是像svn那样记录增量修改。如果一个大文件只改了1行，git仍然会为其新建一个快照。这就带来了一个问题：git的这种设计思想会占用很大的存储空间，显得很浪费。&lt;/p&gt;
&lt;p&gt;在这一点上，git真的无能为力吗？&lt;/p&gt;
&lt;h2&gt;Git压缩&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;我们新建一个100w行都为3的文件3.txt并提交，然后把第一行改成4再提交。&lt;/p&gt;
&lt;p&gt;我们发现有2个12k的快照：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;➜ du -sh ./* |grep 12K
12K ./9b
12K ./ce
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;磁盘上有了两个几乎完全相同的12K的对象。如果Git只完整保存其中一个，并保存另一个对象的差异内容，岂不更好？&lt;/p&gt;
&lt;p&gt;事实上 Git 可以那样做。Git 往磁盘保存对象时默认使用的格式叫松散对象 (loose object) 格式。Git 时不时地将这些对象打包至一个叫 packfile 的二进制文件以节省空间并提高效率。当仓库中有太多的松散对象，或是手工调用 git gc 命令，或推送至远程服务器时，Git 都会这样做。手工调用 git gc 命令让 Git 将库中对象打包并看会发生些什么：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;➜ git gc
Counting objects: 20, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (15/15), done.
Writing objects: 100% (20/20), done.
Total 20 (delta 6), reused 0 (delta 0)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看一下object目录，原来的object都没了，在pack文件夹下生成了2新文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;➜ find .git/objects -type f
.git/objects/info/packs
.git/objects/pack/pack-ee129ceb0468a3cf3ba3aa6023a317df104c2f44.idx
.git/objects/pack/pack-ee129ceb0468a3cf3ba3aa6023a317df104c2f44.pack
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看idx文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;➜ git verify-pack -v .git/objects/pack/pack-ee129ceb0468a3cf3ba3aa6023a317df104c2f44.idx
9b84452867f54e90019ae876477060784a08ac50 blob   2000000 1968 1107
ce01eef250562995d118fdae4d5f9836d89fe483 blob   102 87 3231 1 9b84452867f54e90019ae876477060784a08ac50
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;果然是增量保存，ce01e只有102字节。&lt;/p&gt;
&lt;p&gt;Git自动定期对仓库进行重新打包以节省空间，当然也可以手工运行 git gc 命令。&lt;/p&gt;
&lt;h2&gt;Git分支&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;SVN中新建分支是个昂贵的过程，常常需要创建一个源代码目录的完整副本，对大型项目来说会花费很长时间。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Git的分支可谓是难以置信的轻量级，它的新建操作几乎可以在瞬间完成，并且在不同分支间切换起来也差不多一样快。和许多其他版本控制系统不同，Git鼓励在工作流程中频繁使用分支与合并，哪怕一天之内进行许多次都没有关系。理解分支的概念并熟练运用后，你才会意识到为什么Gi 是一个如此强大而独特的工具，并从此真正改变你的开发方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们创建一个分支test_branch，并切换过去:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git branch test_branch
git checkout test_branch
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们发现HEAD文件的内容指向了新文件refs/heads/test_branch&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;➜ cat .git/HEAD
ref: refs/heads/test_branch

➜ cat .git/refs/heads/test_branch
ab779b378043dbb4fa4436cab8263f4a5ba8d26a
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改一下1.txt并提交，test_branch指向了新的commit&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cat .git/refs/heads/test_branch
7622a8a51a02d7843026589c71e587b7ad123c1c
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;切回master，一切未变，master仍然指向老的commit：ab779b3&lt;/p&gt;
&lt;p&gt;这时候我们在master里把test_branch合进来：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;➜ git merge test_branch
Updating ab779b3..7622a8a
Fast-forward
 1.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;发生了什么？master的commit从ab779b3变成了test_branch的commit对象7622a8a。&lt;/p&gt;
&lt;p&gt;于是我们看到，分支在git中就是一个指向某个commit对象的指针，记录在refs文件夹中，增加分支/删除分支/合并分支全部是在操作指针。&lt;/p&gt;
&lt;p&gt;How beautiful it is!&lt;/p&gt;
&lt;h2&gt;Git远程传输&lt;/h2&gt;
&lt;p&gt;当我们输入git clone xxx的时候，究竟发生了什么？&lt;/p&gt;
&lt;p&gt;其实很简单，在Https的基础上git会去获取远程仓库的当前commit对象，然后一个一个http get到本地。&lt;/p&gt;
&lt;p&gt;偷个懒，详细过程请看：&lt;a href="http://git-scm.com/book/en/Git-Internals-Transfer-Protocols"&gt;http://git-scm.com/book/en/Git-Internals-Transfer-Protocols&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;2005年，Linus Torvalds受够了市面上的版本控制软件，为了更好的管理Linux Kernel项目而开发了Git，最初的设计思想是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分布式工作流&lt;/li&gt;
&lt;li&gt;防止内容受损的安全措施&lt;/li&gt;
&lt;li&gt;高性能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今天，当我们打开&lt;a href="http://git-scm.com"&gt;Git官网&lt;/a&gt;，&lt;strong&gt;--everything-is-local&lt;/strong&gt;仍然被摆在最醒目的位置上。git独特的设计决定了它完全支持离线工作、离线提交、离线访问历史记录的功能。&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;p&gt;Local means fast and stable.&lt;/p&gt;
&lt;p&gt;人人都喜欢在本地工作，快速、稳定、不依赖网络传输。&lt;/p&gt;
&lt;p&gt;此外，本地开发意味着“去中心化”的分布式思想，每个人的机器上都是一个Git仓库，互相可以任意push和pull，而且这也相当于用类似“冗余”的手段实现了高可用性，中央仓库挂了也没事。&lt;/p&gt;
&lt;p&gt;所以仔细品味一下，支持本地离线开发是多么传奇而伟大的设计。&lt;/p&gt;
&lt;p&gt;此外，Git基于完整文件快照而非增量变更的设计，使分支成为了&lt;strong&gt;真正的&lt;/strong&gt;分支，简洁、快速而强大，一切分支操作都显得那么得自然、流畅。&lt;/p&gt;
&lt;p&gt;当我们说一个软件很棒的时候，不仅仅是说它好用，更是在说它内部优美的设计。我们会不由自主地ask why，并在好奇心的驱使下进入内部一探究竟。&lt;/p&gt;
&lt;p&gt;探寻像Git这样富有传奇性的软件内部无疑是一件趣味性极强的事情，甚至能感受到一种软件设计的哲学思想。&lt;/p&gt;
&lt;p&gt;这种哲学给人的感觉就是，Git就像是在未来世界设计的软件，然后穿梭回来给世人使用。&lt;/p&gt;
&lt;p&gt;Too fast, too clean, too strong, and too good.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;p&gt;Linus Torvalds认为svn极度依赖中央仓库缺乏高可用性，于是设计了分布式工作流；觉得svn分支过于重量级显得很愚蠢，于是设计了完整快照+分支指针的模型；觉得svn大量操作依赖网络io显得很慢，于是设计了本地离线开发模式。&lt;/p&gt;
&lt;p&gt;这让我想起来一篇伟大的文章：&lt;a href="http://paulgraham.com/startupideas.html"&gt;How to Get Startup Ideas&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;生活中我们常常问“怎样才能&lt;strong&gt;想出来&lt;/strong&gt;一个优美设计”的时候，究竟在问什么？&lt;/p&gt;
&lt;p&gt;优美的设计真的是&lt;strong&gt;想出来&lt;/strong&gt;的吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Noticing , not coming up with.&lt;/p&gt;
&lt;p&gt;Live in the future, then build what's missing. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;于是Git横空出世，犹如后来的iphone。&lt;/p&gt;
&lt;p&gt;多么酷，多么美，多么令人着迷。&lt;/p&gt;
&lt;p&gt;所以问题的关键来了，怎样才能具备&lt;strong&gt;观察&lt;/strong&gt;缺失的能力，首先我们需要成为擅长观察缺失的人，这意味着批判式思维，各个软件的设计不再让我们感到理所当然，就像2005年人们都觉得svn已经够好了，Linus Torvalds却仍然觉得很不爽。&lt;/p&gt;
&lt;p&gt;开始观察软件/生活中让我们感到不爽的地方并思考怎样去改进是一件很累的事情，但这种累并不意味着我们自身出了问题。&lt;/p&gt;
&lt;p&gt;也许，只是我们跑得太快了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">lizherui</dc:creator><pubDate>Sun, 25 May 2014 00:00:00 +0800</pubDate><guid>tag:www.lizherui.com,2014-05-25:pages/2014/05/25/a_git_adventure.html</guid><category>git</category></item><item><title>在cgdb中进行I/O交互</title><link>http://www.lizherui.com/pages/2013/10/07/io_in_cgdb.html</link><description>&lt;p&gt;cgdb，gdb -tui的加强版，非常优秀，中文教程在此：&lt;a href="https://github.com/leeyiw/cgdb-manual-in-chinese/blob/master/contents.md"&gt;https://github.com/leeyiw/cgdb-manual-in-chinese/blob/master/contents.md&lt;/a&gt;，不再赘述。&lt;/p&gt;
&lt;p&gt;cgdb有一个问题困扰了我很久：如何方便地进行I/O交互。&lt;/p&gt;
&lt;p&gt;虽然cgdb自带了TTY模式，但不太靠谱，调试到某些Unix I/O接口时会卡死，如read函数。&lt;/p&gt;
&lt;p&gt;今天我又反复看了下教程，发现了这样一句以前没注意的忠告：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果被调试的程序需要读取终端用户输入，我们推荐用户在终端中启动被调试程序，然后在另一个终端使用CGDB去attach被调试程序，这是与被调试程序进行I/O交互最简单的方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是教程没有说具体该怎么操作，摸索了下，终于完美解决，以调试redis-cli为例。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;命令行先后启动redis-server和redis-cli；&lt;/li&gt;
&lt;li&gt;ps查到redis-cli进程号后直接cgdb -p [pid]；
&lt;img alt="1" src="https://lh6.googleusercontent.com/-5Eq0HZugi_0/UlGfDvp545I/AAAAAAAAASE/EUUwYqy23aY/w788-h124-no/Screen+Shot+2013-10-07+at+1.33.30+AM.png" /&gt;&lt;/li&gt;
&lt;li&gt;进入cgdb后不要慌，用bt看下阻塞I/O在哪里；
&lt;img alt="2" src="https://lh4.googleusercontent.com/-g3Mq_Eg2aGI/UlGf0iupLjI/AAAAAAAAASY/rApjcwZpibw/w958-h112-no/Screen+Shot+2013-10-07+at+1.36.55+AM.png" /&gt;&lt;/li&gt;
&lt;li&gt;然后在阻塞I/O处设置断点，可以看到这里在linenoise.c的312行调用了read()，直接加断点b linenoise.c:312；&lt;/li&gt;
&lt;li&gt;cgdb中输入continue，然后再去redis-cli那里输入想调试的命令，比如info，回到cgdb，发现源码已经刷出来了，大功告成。
&lt;img alt="3" src="https://lh4.googleusercontent.com/-2k_4-6EXv1I/UlGhLX__87I/AAAAAAAAATA/2PIFr0YZv8c/w958-h599-no/Screen+Shot+2013-10-07+at+1.42.54+AM.png" /&gt;&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">lizherui</dc:creator><pubDate>Mon, 07 Oct 2013 00:00:00 +0800</pubDate><guid>tag:www.lizherui.com,2013-10-07:pages/2013/10/07/io_in_cgdb.html</guid><category>cgdb</category></item><item><title>一步一步打造Geek风格的技术博客</title><link>http://www.lizherui.com/pages/2013/08/17/build_blog.html</link><description>&lt;h2&gt;如梦初醒&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3&gt;Geek是什么&lt;/h3&gt;
&lt;p&gt;Geek更多的是一种精神，一种态度，一种对技术的理解与信念。他们无法忍受丑陋的代码，拙劣的技术。他们思路开阔，技术娴熟，他们不甘平庸，追求完美。他们不会囿于常识，他们敢于突破。在常人眼中，他们不走寻常路，享受各种非主流的技术。但在他们自己眼中，这些又是那么得自然与优美。他们用自己的行为诠释着自己对于技术的理解，用那份固执传达着自己的信念。&lt;/p&gt;
&lt;p&gt;他们掌握并热爱着技术，叛逆、执着，崇尚自由。&lt;/p&gt;
&lt;h3&gt;为什么不选择CSDN、Wordpress、Jekyll等技术&lt;/h3&gt;
&lt;p&gt;我在CSDN上发表博文被和谐了一次，就不会允许这种事发生第二次。&lt;/p&gt;
&lt;p&gt;Wordpress上手容易、功能强大、插件丰富。但是在我看来，这些优点同时也是它的缺点：太笨重、太无脑、不够酷、无用功能太多、可定制的粒度不够小。我更喜欢简洁快速粗暴的博客系统。&lt;/p&gt;
&lt;p&gt;Jekyll非常棒，可惜它基于Ruby。对于Python爱好者而言，基于Python的Pelican显然更加可口。&lt;/p&gt;
&lt;h2&gt;卧薪尝胆&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;我在搭建这个博客的过程中学到了很多很多有意思的技术。&lt;/p&gt;
&lt;p&gt;搭建环境为Mac OS X/Linux，Windows下可能会麻烦一些。&lt;/p&gt;
&lt;p&gt;搭建过程中会涉及到的技术名词如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mac OS X&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Pip&lt;/li&gt;
&lt;li&gt;Pelican&lt;/li&gt;
&lt;li&gt;Jinja2&lt;/li&gt;
&lt;li&gt;Github &lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;Makefile&lt;/li&gt;
&lt;li&gt;Markdown&lt;/li&gt;
&lt;li&gt;Mou&lt;/li&gt;
&lt;li&gt;Google Analytics&lt;/li&gt;
&lt;li&gt;Google Custom Search&lt;/li&gt;
&lt;li&gt;Google Webmasters&lt;/li&gt;
&lt;li&gt;Picasa&lt;/li&gt;
&lt;li&gt;Disqus&lt;/li&gt;
&lt;li&gt;Rss&lt;/li&gt;
&lt;li&gt;Sitemap&lt;/li&gt;
&lt;li&gt;Godaddy&lt;/li&gt;
&lt;li&gt;Dnspod&lt;/li&gt;
&lt;li&gt;A记录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;若对任何一个技术名词有疑问，请翻墙&lt;a href="https://www.google.com/ncr"&gt;Google&lt;/a&gt; it.&lt;/p&gt;
&lt;h2&gt;初见端倪&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;开始动手。&lt;/p&gt;
&lt;h3&gt;Github入门指南&lt;/h3&gt;
&lt;p&gt;请参考&lt;a href="http://blog.csdn.net/duxinfeng2010/article/details/8654690"&gt;http://blog.csdn.net/duxinfeng2010/article/details/8654690&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;使用Github Pages创建个人博客&lt;/h3&gt;
&lt;p&gt;Github为每一个用户分配了一个二级域名username.github.io，用户为自己的二级域名创建主页很简单，只需要在Github下创建一个名为username.github.io的版本库，并向其master分支提交网站静态页面即可。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;登陆Github，创建一个名为username.github.io的版本库（将username替换成自己的Github账户名）。&lt;/li&gt;
&lt;li&gt;点击Setting，选择一个自己喜欢的模板，最后点击发布public按钮。&lt;/li&gt;
&lt;li&gt;耐心等待一段时间（不超过10分钟），登陆http://username.github.io，会发现自己的个人博客已经生成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;安装Pelican和Markdown&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install pelican
pip install markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;搭建骨架&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir blog
cd blog
pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;根据提示一步步输入相应的配置项，不知道如何设置的接受默认即可，后续可以通过编辑pelicanconf.py文件更改配置)&lt;/p&gt;
&lt;p&gt;以下是生成的目录结构：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;blog/
├── content              # 存放输入的源文件
│   └── (pages)          # 存放手工创建的静态页面
├── output               # 生成的输出文件
├── develop_server.sh    # 方便开启测试服务器
├── Makefile             # 方便管理博客的Makefile
├── pelicanconf.py       # 主配置文件
└── publishconf.py       # 主发布文件，可删除
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;进入output把自己刚刚建好的username.github.io版本库clone下来：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cd output
git clone git@github.com:username/username.github.io.git
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;开始写博文&lt;/h3&gt;
&lt;p&gt;在content目录下用Markdown语法来写一篇文章，最好选择专业的Markdown编辑器，在Mac OS X下推荐使用Mou，在Linux/Windows下请Google。&lt;/p&gt;
&lt;p&gt;用Markdown写博文截图如下：
&lt;img alt="1" src="https://lh5.googleusercontent.com/-edzDa6ch3Jk/Ug5oATNTjsI/AAAAAAAAAKs/WIqU7KziyOA/w958-h599-no/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-08-17+%25E4%25B8%258A%25E5%258D%25881.57.09.png" /&gt;&lt;/p&gt;
&lt;p&gt;左半边是正在用markdown写的博文，右边是即时预览效果。&lt;/p&gt;
&lt;p&gt;写完后，执行以下命令，即可在本机&lt;a href="http://127.0.0.1:8000"&gt;http://127.0.0.1:8000&lt;/a&gt;看到效果。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make publish
make serve
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;若要一键上传到Github，需要修改Makefile两处地方：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;publish&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;PELICAN&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;INPUTDIR&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="err"&gt;-o&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;OUTPUTDIR&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="err"&gt;-s&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;CONFFILE&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;PELICANOPTS&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;github&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;publish&lt;/span&gt;
&lt;span class="err"&gt;cd&lt;/span&gt; &lt;span class="err"&gt;OUTPUTDIR&lt;/span&gt; &lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="err"&gt;git&lt;/span&gt; &lt;span class="err"&gt;add&lt;/span&gt; &lt;span class="err"&gt;.&lt;/span&gt; &lt;span class="err"&gt;;&lt;/span&gt;  &lt;span class="err"&gt;git&lt;/span&gt; &lt;span class="err"&gt;commit&lt;/span&gt; &lt;span class="err"&gt;-am&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;your comments&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="err"&gt;git&lt;/span&gt; &lt;span class="err"&gt;push&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以后写完文章执行make github就可以一键部署了。&lt;/p&gt;
&lt;h2&gt;如虎添翼&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;我们已经能成功地用markdown写出博文并部署到github了，但这远远不够。&lt;/p&gt;
&lt;h3&gt;管理图片&lt;/h3&gt;
&lt;p&gt;我觉得使用云相册比本地图片要方便的多，我使用&lt;a href="https://picasaweb.google.com?noredirect=1"&gt;Picasa&lt;/a&gt;来维护blog的所有图片。&lt;/p&gt;
&lt;h3&gt;挑选主题&lt;/h3&gt;
&lt;p&gt;安装主题，比如bootstrap2：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone https://github.com/getpelican/pelican-themes.git
cd pelican-themes
pelican-themes -i bootstrap2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;选择主题，在pelicanconf.py中添加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;THEME = &amp;#39;bootstrap2&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;安装第三方评论系统&lt;/h3&gt;
&lt;p&gt;在&lt;a href="https://disqus.com/admin/signup"&gt;Disqus&lt;/a&gt;上申请一个站点，记牢Shortname。
在pelicanconf.py添加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;DISQUS_SITENAME = Shortname
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;添加Google Analytics&lt;/h3&gt;
&lt;p&gt;去&lt;a href="http://www.google.com/analytics"&gt;Google Analytics&lt;/a&gt;申请账号，记下跟踪ID。
在pelicanconf.py添加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;GOOGLE_ANALYTICS = 跟踪ID
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Google Analytics极其强悍，截图说明一切：
&lt;img alt="2" src="https://lh6.googleusercontent.com/-9vXmIT6vXDo/Ug5wTSu4wMI/AAAAAAAAALM/5-VSrnXNGUU/w958-h599-no/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-08-17+%25E4%25B8%258A%25E5%258D%25882.31.26.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3" src="https://lh6.googleusercontent.com/-a4ZAnTD7F0I/Ug5wTX0w9nI/AAAAAAAAALI/x9J0atK3lpU/w958-h599-no/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-08-17+%25E4%25B8%258A%25E5%258D%25882.31.54.png" /&gt;&lt;/p&gt;
&lt;h3&gt;使用Google Webmasters&lt;/h3&gt;
&lt;p&gt;在&lt;a href="http://www.google.com/webmasters"&gt;Google Webmasters&lt;/a&gt;上注册即可。&lt;/p&gt;
&lt;p&gt;这个就是Google站长工具，使用它的目的是为了让博客被Google更好的收录，比如手动让Googlebot抓取、提交Robots、更新Sitemap等等，各方面完爆百度站长工具。&lt;/p&gt;
&lt;p&gt;截图如下：
&lt;img alt="3" src="https://lh3.googleusercontent.com/-tYrEbXyx_5o/UhGS1C_lcYI/AAAAAAAAALk/H7X7MBjNkVY/w958-h599-no/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-08-19+%25E4%25B8%258A%25E5%258D%258811.36.32.png" /&gt;&lt;/p&gt;
&lt;h3&gt;添加插件&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone git://github.com/getpelican/pelican-plugins.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;比如我要使用sitemap，在pelicanconf.py里配置如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;PLUGIN_PATH = u&amp;quot;pelican-plugins&amp;quot;
PLUGINS = [&amp;quot;sitemap&amp;quot;]
SITEMAP = {
    &amp;quot;format&amp;quot;: &amp;quot;xml&amp;quot;,
    &amp;quot;priorities&amp;quot;: {
        &amp;quot;articles&amp;quot;: 0.7,
        &amp;quot;indexes&amp;quot;: 0.5,
        &amp;quot;pages&amp;quot;: 0.3,
    },
    &amp;quot;changefreqs&amp;quot;: {
        &amp;quot;articles&amp;quot;: &amp;quot;monthly&amp;quot;,
        &amp;quot;indexes&amp;quot;: &amp;quot;daily&amp;quot;,
        &amp;quot;pages&amp;quot;: &amp;quot;monthly&amp;quot;,
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;使用Google站内搜索&lt;/h3&gt;
&lt;p&gt;请参考&lt;a href="http://www.codenut.net/post/2013-06-30-cse"&gt;http://www.codenut.net/post/2013-06-30-cse&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;申请独立域名&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;a href="https://www.godaddy.com"&gt;Godaddy&lt;/a&gt;上用支付宝花购买为期一年的顶级域名，并去修改Nameservers为这两个地址：f1g1ns1.dnspod.net、f1g1ns2.dnspod.net。&lt;/li&gt;
&lt;li&gt;在&lt;a href="https://www.dnspod.cn"&gt;Dnspod&lt;/a&gt;上添加新域名，并申请一条A记录指向Github Pages的ip:207.97.227.245；&lt;/li&gt;
&lt;li&gt;在Pelican主目录新建CNAME文件，添上刚刚申请的域名，如我的www.lizherui.com&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;登峰造极&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;最后，如果感觉还不够味儿，可以参考Pelican官方文档和这个博客的完整源码。&lt;/p&gt;
&lt;p&gt;Pelican : &lt;a href="http://docs.getpelican.com/en/3.2"&gt;http://docs.getpelican.com/en/3.2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Source Code : &lt;a href="https://github.com/lizherui/lizherui.github.io"&gt;https://github.com/lizherui/lizherui.github.io&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Have fun!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">lizherui</dc:creator><pubDate>Sat, 17 Aug 2013 00:00:00 +0800</pubDate><guid>tag:www.lizherui.com,2013-08-17:pages/2013/08/17/build_blog.html</guid><category>pelican</category><category>blog</category><category>python</category></item><item><title>为什么我一直强烈推荐程序员使用Mac OS X</title><link>http://www.lizherui.com/pages/2013/08/11/use_mac_os_x.html</link><description>&lt;p&gt;像绝大多数国内程序员一样，我在相当长的时间里对Mac OS X一无所知，最开始使用Windows进行开发，然后转到Linux。&lt;/p&gt;
&lt;p&gt;去年11月我终于攒够钱了，决定试着从Linux转到Mac OS X，于是入手Macbook Pro，从此踏上了Mac OS X的道路，没想到一去不复返。&lt;/p&gt;
&lt;p&gt;这一年来使用Mac OS X的经历，不仅极大地开拓了我的视野，而且在很大程度上改变了我对待软件开发的态度。当然了，最重要的是，它使我的开发效率有了质的提升。&lt;/p&gt;
&lt;h2&gt;Macintosh在国内的现状&lt;/h2&gt;
&lt;p&gt;Macintosh，即搭载着Mac OS X操作系统的苹果电脑，在国内的市场份额一直少得可怜，甚至在程序员这样的团体中亦是如此。&lt;/p&gt;
&lt;p&gt;是因为Macintosh太贵了？还是因为Mac OS X不兼容Windows的一些软件？虽然这两条理由确实会打消广大普通用户购买Macintosh的念头，但是对于国内程序员来讲，这俩显然都不是问题。&lt;/p&gt;
&lt;p&gt;那到底是什么原因阻碍了绝大多数国内程序员使用Mac OS X呢？&lt;/p&gt;
&lt;p&gt;我仔细观察过这个事情很长时间，后来越来越明晰地发现，最根本的原因是绝大多数国内程序员完全都不知道Mac OS X是什么，更别提使用Mac OS X能给自己带来哪些好处了。&lt;/p&gt;
&lt;h2&gt;Mac OS X首先是Unix&lt;/h2&gt;
&lt;p&gt;没错，Mac OS X是Unix，这是最重要的一点，而很多很多国内程序员都不知道。&lt;/p&gt;
&lt;p&gt;这是Wikipedia对Mac OS X的部分描述：Mac OS X于1998年首次推出，并从2002年起随Macintosh发售。它是一套Unix基础的操作系统，包含两个主要的部份：核心名为Darwin，是以FreeBSD源代码和Mach微核心为基础，由苹果公司和独立开发者社区协力开发，以及一个由苹果计算机开发，名为Aqua之专有版权的图形界面。&lt;/p&gt;
&lt;p&gt;在命令行执行uname -a可以看到:
&lt;img alt="1" src="https://lh6.googleusercontent.com/v4Y0Fq4yLwoyn9aNLPllnXuooi_0pxbf4v3QUhyDQGk=w958-h40-no" /&gt;&lt;/p&gt;
&lt;p&gt;Mac OS X甚至比Linux具有更纯正的Unix血统，它是真正的Unix，符合标准，有授权，可以合法地用Unix商标。&lt;/p&gt;
&lt;h2&gt;Unix环境意味着什么&lt;/h2&gt;
&lt;p&gt;对于非c#/.net系程序员来讲，一套Unix环境绝对是必备的，尤其是C、C++、PHP、Python、Ruby程序员。Java程序员倒不是那么依赖Unix环境，但使用Unix环境只会如虎添翼。&lt;/p&gt;
&lt;p&gt;我回想起使用Windows开发C/C++/Python的那段日子，最痛苦的事情倒不是有些软件只支持Unix环境，而是当开发过程中遇到一些Windows环境下特有的奇奇怪怪的问题时，Google都搜索不到相应的解决方案，因为活跃的开发者大多使用Unix环境。&lt;/p&gt;
&lt;p&gt;这样的事情发生多了，就会让开发人员感到越来越沮丧，进而绝望。&lt;/p&gt;
&lt;p&gt;于是像大多数程序员一样，我开始学习使用Linux。&lt;/p&gt;
&lt;h2&gt;Linux操作系统的问题&lt;/h2&gt;
&lt;p&gt;就开发程序而言，Linux没有什么问题。&lt;/p&gt;
&lt;p&gt;Linux最大的问题之一在于桌面软件实在太少，连基本的搜狗输入法、QQ都没有，更别提其它的了。&lt;/p&gt;
&lt;p&gt;这就导致我们必须要经常在Linux和Windows之间切换：在Linux下开发，在Windows下做开发以外的事情。&lt;/p&gt;
&lt;p&gt;这样的事情做久了，就会越来越厌烦。&lt;/p&gt;
&lt;p&gt;Linux还有一个大问题就是图形界面太渣，而且很不稳定，实在是无力继续吐槽。&lt;/p&gt;
&lt;p&gt;于是，一个自然而然的需求便会越来越强烈：有没有既含Windows这样靠谱的图形系统以及广大的常用软件，又有高效的Unix命令行环境的一站式解决方案呢？&lt;/p&gt;
&lt;p&gt;答案就是Mac OS X。&lt;/p&gt;
&lt;h2&gt;Mac OS X的其它优势&lt;/h2&gt;
&lt;p&gt;除了上述所说的Mac OS X既含有程序员必备的Unix命令行环境，又具备高端大气上档次的图形界面这一招牌优势外，Mac OS X中还有很多强悍的利器。&lt;/p&gt;
&lt;h3&gt;眼花缭乱的手势&lt;/h3&gt;
&lt;p&gt;我们看到使用macbook的人很少使用鼠标，不是因为他们忘了带，而是根本不需要鼠标，因为触摸板+手势完爆鼠标。&lt;/p&gt;
&lt;p&gt;Macbook的触摸板无疑是世界上最出色的：轻拍点按，双指右键，双指上下滚动，三指查找，三指拖移，四指左右切换全屏程序，四指上推显示Mission Control，四指下推显示Expose，四指合拢显示Launchpad，四指张开显示桌面。。。。。。&lt;/p&gt;
&lt;p&gt;而且由于触摸板离键盘很近，我们能很方便地以手掌为轴心在触摸板和键盘之间旋转切换，而不需要像使用鼠标+键盘那样很麻烦地把整只手移来移去。这一点很重要，无时无刻都在极大地提高开发效率。&lt;/p&gt;
&lt;h3&gt;设计优美的软件&lt;/h3&gt;
&lt;p&gt;Mac OS X上的软件外貌优美，风格统一，没有乱七八糟的广告和病毒，也不需要360这样强奸用户的软件。一切都是绿色的、纯天然的。&lt;/p&gt;
&lt;h3&gt;独一无二的字体渲染&lt;/h3&gt;
&lt;p&gt;Mac OS X的字体渲染效果是最好的，完爆Windows/Linux。在Windows上有一个模仿Mac OS X字体渲染效果的软件叫Mactype，但仍然不能与Mac OS X的字体渲染效果相提并论。大名鼎鼎的Monaco字体有着程序员专用字体的美称，同样来自Mac OS X。&lt;/p&gt;
&lt;p&gt;这是命令行下的字体效果：
&lt;img alt="2" src="https://lh5.googleusercontent.com/-K5cnpKlXKwc/UgfGws5tvzI/AAAAAAAAAJ4/cXOTHfdjWRQ/w728-h350-no/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-08-12+%25E4%25B8%258A%25E5%258D%25881.15.00.png" /&gt;&lt;/p&gt;
&lt;p&gt;这是Vim中的字体效果:
&lt;img alt="3" src="https://lh5.googleusercontent.com/-CrhmcI9FC4Q/UgfG-YrNY1I/AAAAAAAAAKA/1ytp9t3SWto/w724-h612-no/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-08-12+%25E4%25B8%258A%25E5%258D%25881.16.22.png" /&gt;&lt;/p&gt;
&lt;h3&gt;行云流水的快捷键&lt;/h3&gt;
&lt;p&gt;Mac OS X上的快捷键随处可见，能随心所欲地定制，并且大多以Command为组合快捷键中的主键，用大拇指按起来极其顺手，让人渐渐忘却了Windows/Linux上用小拇指费劲地按ctrl/alt的痛苦日子。&lt;/p&gt;
&lt;h3&gt;强悍易用的软件包管理器&lt;/h3&gt;
&lt;p&gt;Homebrew，Mac OS X上强悍的软件包管理器，使用Ruby开发，托管在github上：&lt;a href="https://github.com/mxcl/homebrew"&gt;https://github.com/mxcl/homebrew&lt;/a&gt;。我用过Ubuntu上的apt，也用过Fedora上的yum，但它俩实在无法跟Homebrew相提并论。&lt;/p&gt;
&lt;h2&gt;结束语&lt;/h2&gt;
&lt;p&gt;无它，唯Mac OS X。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">lizherui</dc:creator><pubDate>Sun, 11 Aug 2013 00:00:00 +0800</pubDate><guid>tag:www.lizherui.com,2013-08-11:pages/2013/08/11/use_mac_os_x.html</guid><category>mac os x</category><category>macintoch</category></item><item><title>编写可读代码的艺术</title><link>http://www.lizherui.com/pages/2013/08/08/clean_code.html</link><description>&lt;p&gt;我最早开始重视代码的可读性还是大三在搜狐做Python研发实习生的时候。那会儿我特别嫩，写代码还是学校大作业风格，天天被leader各种批评。现在回忆起来，虽然在搜狐呆的时间特别短，但那段经历能引起我对代码可读性的重视，也算是重量级的收获了。&lt;/p&gt;
&lt;p&gt;今天一口气读完了《编写可读性代码的艺术》，感觉非常爽。我一直认为代码的可读性绝对是第一重要的，正如《黑客与画家》所言："代码写出来是给人看的，附带着能在机器上运行"。&lt;/p&gt;
&lt;p&gt;顺手记录了几个重要的原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;可读性基本定理：代码的写法应当使别人理解它所需的时间最小化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把信息装进名字里。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;清晰和精确比装可爱好。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在小的作用域内可以使用短的名字。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不会误解的名字是最好的名字。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用一致的布局；让相似的代码看上去相似；把相关的代码行分组，形成代码块。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一致的风格比正确的风格更重要。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注释的目的是尽量帮助读者了解得和作者一样多。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不要为那些从代码本身就能快速推断的事实写注释。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注释应该有很高的信息/空间率。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把条件、循环以及其他对控制流的改变做得越“自然”越好，使读者不用停下了重读你的代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;默认情况下都用if/else，三目运算符?:只在最简单的情况下使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当你对代码改动时，从全新的角度审视它，把它作为一个整体来看待。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把超长表达式拆分出易于理解的小块。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小心“智能”的小代码段，它们往往在以后会让别人读起来很困惑。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;让变量对尽量少的代码行可见。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作一个变量的地方越多，就越难确定它的当前值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应当把代码组织得一次只做一件事情。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最好读的代码就是没有代码。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">lizherui</dc:creator><pubDate>Thu, 08 Aug 2013 00:00:00 +0800</pubDate><guid>tag:www.lizherui.com,2013-08-08:pages/2013/08/08/clean_code.html</guid><category>可读性</category><category>读书笔记</category></item><item><title>如何成为一名黑客(转)</title><link>http://www.lizherui.com/pages/2013/08/06/become_a_hack.html</link><description>&lt;p&gt;这是一份大名鼎鼎的黑客手册，来自Eric S. Raymond，我忍不住转存下来。&lt;/p&gt;
&lt;h2&gt;什么是黑客&lt;/h2&gt;
&lt;p&gt;Jargon File 包含了一大堆关于“hacker”这个词的定义，大部分与技术高超和热衷解决问题 及超越极限有关。但如果你只想知道如何 成为 一名黑客， 那么只有两件事情确实相关。&lt;/p&gt;
&lt;p&gt;这可以追溯到几十年前第一台分时小型电脑诞生, ARPAnet 实验也刚展开的 年代，那时有一个由程序设计专家和网络名人所组成的, 具有分享特点的文化社群。 这种文化的成员创造了 “hacker” 这个名词。黑客们建立了 Internet。 黑客们发明出了现在使用的 UNIX 操作系统。黑客们使 Usenet 运作起来， 黑客们让 WWW 运转起来。如果你是这个文化的一部分，如果你对这种文化有所贡献，而且 这个社群的其它成员也认识你并称你为 hacker, 那么你就是一位黑客。&lt;/p&gt;
&lt;p&gt;黑客精神并不仅仅局限在软件的黑客文化中。 有人用黑客态度对待其它事情，如电子学和音乐—— 事实上，你可以在任何最高级别的科学和艺术活动中发现它。 精于软件的黑客赞赏这些在其他领域的同类并把他们也称作黑客—— 有人宣称黑客天性是绝对独立于他们工作的特定领域的。 但在这份文档中， 我们将注意力集中在软件黑客的技术和态度， 以及发明了“黑客”一词的以共享为特征的文化传统之上。&lt;/p&gt;
&lt;p&gt;有一群人大声嚷嚷着自己是黑客，但他们不是。 他们（主要是正值青春的少年）是一些蓄意破坏计算机和电话系统的人。 真正的黑客把这些人叫做“骇客”(cracker)，并不屑与之为伍。 多数真正的黑客认为骇客们又懒又不负责任，还没什么大本事。 专门以破坏别人安全为目的的行为并不能使你成为一名黑客， 正如 用铁丝偷开走汽车并不能使你成为一个汽车工程师。 不幸的是，很多记者和作家往往错把“骇客”当成黑客； 这种做法一直使真正的黑客感到恼火。&lt;/p&gt;
&lt;p&gt;根本的区别是：黑客搞建设，骇客搞破坏。&lt;/p&gt;
&lt;p&gt;如果你想成为一名黑客，请接着读下去。如果你想做一个骇客，去读 alt.2600 新闻组，并在意识到你并不像自己想象的那么聪明后去坐五到十次监狱。 关于骇客，我只想说这么多。&lt;/p&gt;
&lt;h2&gt;黑客应有的态度&lt;/h2&gt;
&lt;p&gt;黑客们解决问题，建设事物，同时他们崇尚自由和无私的双向帮助。 要被他人承认是一名黑客，你的行为得体现出你好像具备了这种态度一般。 而要想做得好象你具备这种态度一般，你就得切切实实坚持它。&lt;/p&gt;
&lt;p&gt;但是如果你认为培养黑客态度只是一条在黑客文化圈中得到承认的路子， 那就大错特错了。成为具备这些特质的这种人对 你自己非常重要——有助于你学习，及给你提供源源不断的动力。 同所有创造性的艺术一样，成为大师
的最有效方法就是模仿大师的精神—— 不仅从智力上，也要从感情上进行模仿。&lt;/p&gt;
&lt;p&gt;或许, 下面这首现代的禅诗很好的阐述了这个意思：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;To follow the path:（沿着这样一条道路：）

look to the master,（寻找大师，）

follow the master,（跟随大师，）

walk with the master,（与大师通行，）

see through the master,（洞察大师，）

become the master.（成为大师。）
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;嗯，如果你想成为一名黑客，反复读下面的事情直至你相信它们。&lt;/p&gt;
&lt;h3&gt;1，世界充满了待解决的迷人问题&lt;/h3&gt;
&lt;p&gt;做一名黑客会有很多乐趣，但却是要费很多气力方能得到的乐趣。 这些努力需要动力。成功的运动员从锻炼身体、超越自我极限的愉悦中得到动力。 同样，做黑客，你得能从解决问题，磨练技术及锻炼智力中得到基本的乐趣。&lt;/p&gt;
&lt;p&gt;如果你还不是天生的这类人又想做黑客，你就要设法成为这样的人。 否则你会发现，你的黑客热情会被其他分心的事物吞噬掉——如金钱、性和社会上的虚名。&lt;/p&gt;
&lt;p&gt;同样你必须对你自己的学习能力建立信心——相信尽管当你对某问题近乎一无所知， 但只要你一点一点地试验、学习，最终会掌握并解决它：&lt;/p&gt;
&lt;h3&gt;2，一个问题不应该被解决两次。&lt;/h3&gt;
&lt;p&gt;聪明的脑袋是宝贵的有限的资源。当世界还充满非常多有待解决的有趣的新问题时， 它们不应该被浪费在重新发明轮子这类事情上。&lt;/p&gt;
&lt;p&gt;作为一名黑客，你必须相信其他黑客的思考时间是宝贵的——因此共享信息， 解决问题并发布结果给其他黑客几乎是一种道义，这样其他人就可以去解决 新问题而不是不断地忙于对付旧问题。&lt;/p&gt;
&lt;p&gt;(你不必认为一定要把你 所有的发明创造公布出去， 但这样做的黑客是赢得大家极度尊敬的人。卖些钱来养家糊口，租房买计算机 甚至发大财和黑客价值观也是相容的，只要你别忘记你还是个黑客。)&lt;/p&gt;
&lt;h3&gt;3，无聊和乏味的工作是罪恶。&lt;/h3&gt;
&lt;p&gt;黑客（泛指具有创造力的人们）应该从来不会被愚蠢的重复性劳动所困扰， 因为当这种事情发生时就意味着他们没有在做只有他们才能做的事情—— 解决新问题。这样的浪费伤害每一个人。因此，无聊和乏味的工作不仅仅是 令人不舒服而已，而且是罪恶。&lt;/p&gt;
&lt;p&gt;作为一个黑客，你必须坚信这点并尽可能多地将乏味的工作自动化， 不仅为你自己，也为了其他人（尤其是其他黑客们）。&lt;/p&gt;
&lt;p&gt;(对此有一个明显的例外。黑客有时也做一些在他人看来是重复性或枯燥的工作 以进行“脑力休息”，或是为了获得某种技能，或是获得一些除此以外无法获得的 特别经验。但这是自愿的——有脑子的人不应该被迫做无聊的活儿。）&lt;/p&gt;
&lt;h3&gt;4，自由万岁。&lt;/h3&gt;
&lt;p&gt;黑客们是天生的反独裁主义者。 任何能向你发命令的人能够迫使你停止解决令你着迷的问题， 同时，按照独裁者的一般思路，他通常会给出一些极端愚昧的理由。 因此，不论何处，任何独裁主义的作法，只要它压迫你和其他黑客，你就要和它斗到底。&lt;/p&gt;
&lt;p&gt;(这并非向所有权威挑战。儿童需要监护，罪犯要被看管起来。 如果服从命令得到某种东西比起用其他方式得到它更节约时间，黑客可以同意 接受某种形式的权威。但这是一个有限度的，有意的交易； 那种权威想要的个人服从不是你应该同意给予的。)&lt;/p&gt;
&lt;p&gt;权威喜欢审查和保密。他们不信任自愿的合作和信息的共享—— 他们只喜欢由他们控制的所谓“合作”。因此，作为一个黑客， 你得对审查、保密，以及使用武力或欺骗去压迫有行为能力的人们的做法有一种本能的敌意。 同时你要有为此信念斗争的意愿。&lt;/p&gt;
&lt;h3&gt;5，态度不能替代能力。&lt;/h3&gt;
&lt;p&gt;作为一名黑客，你必须培养起这些态度。 但只具备这些态度并不能使你成为一名黑客，也不能使你成为一个运动健将和摇滚明星。 成为一名黑客需要智力，实践，奉献精神和辛苦工作。&lt;/p&gt;
&lt;p&gt;因此，你必须学会怀疑，并尊重各种各样的能力。 黑客们不会为那些装模做样的人浪费时间，但他们却非常尊重能力—— 尤其是从事黑客工作的能力，不过任何能力总归是好的。 具备很少人能具备的那些方面的能力尤其好，其中具备 涉及脑力、技巧和专注方面能力的当然最好。&lt;/p&gt;
&lt;p&gt;尊敬能力，你就会享受到提高自己能力的乐趣—— 辛苦的工作和奉献会变成一种高度娱乐而非苦差事。 要想成为一名黑客，这一点非常重要。&lt;/p&gt;
&lt;h2&gt;黑客的基本技能&lt;/h2&gt;
&lt;p&gt;黑客态度重要，但技术更加重要。 态度无法替代技术，在你被别的黑客称为黑客之前，有一些基本的技术你必须掌握。&lt;/p&gt;
&lt;p&gt;这些基本技术随着新技术的出现和老技术的过时也随时间在缓慢改变。 例如，过去内容包括使用机器语言编程，而直到最近才包括了HTML。 总的来说现在主要包括以下技术：&lt;/p&gt;
&lt;h3&gt;1，学习如何编程。&lt;/h3&gt;
&lt;p&gt;这当然是最基本的黑客技能。如果你还不会任何编程语言，我建议你从Python开始。 它设计清晰，文档齐全，合适初学者入门。 它是一门很好的入门语言，并且不仅仅只是个玩具； 它非常强大、灵活，也适合做大型项目。 &lt;/p&gt;
&lt;p&gt;我有一篇 Python评价详细说明这点。好的 教程 可以在Python网站 得到。 （译者：比较好的中文Python站点可能是http://pythonrecord.51.net。）&lt;/p&gt;
&lt;p&gt;Java也是好的入门语言。它比Python难得多，但是生成的代码速度也快得多。 它同时也是一种优秀的计算机语言，不止是用来入门。&lt;/p&gt;
&lt;p&gt;但是注意，如果你只会一两门语言，你将不会达到黑客所要求的技术水平， 甚至也不能达到一个程序员的水平——你需要学会如何以抽象的方式思考编程问题， 独立于任何语言。要做一名真正的黑客，你需要学会在几天内通过一些手册， 结合你现在所知，迅速掌握一门新语言。这意味着你应该学会几种截然不同的语言。&lt;/p&gt;
&lt;p&gt;如果要做一些重要的编程工作，你将不得不学习C语言，Unix的核心语言。 C++与C非常其他类似；如果你了解其中一种，学习另一种应该不难。 但这两种都不适合编程入门者学习。而且事实上，你越避免用C编程，你的工作效率会越高。&lt;/p&gt;
&lt;p&gt;C非常有效率，节约你的机器资源。不幸的是，C的高效是通过你手动做很多底层的管理 （如内存）来达到的。底层代码都是复杂极易出现bug的，会使你花极多的时间调试。 如今的机器速度如此之快，这通常是得不偿失——比较明智的做法是使用一种运行较慢、较低 效率，但大幅节省你的时间的语言。因此，选择Python。&lt;/p&gt;
&lt;p&gt;其他对黑客而言比较重要的语言包括 Perl 和 LISP 。 Perl实用，值得一学；它被广泛用于动态网页和系统管理， 因此即便你从不用Perl写程序，至少也应该学会看。许多人使用Perl的理由和 我建议你使用Python的理由一样，都是为了避免用C完成那些不需要C高效率的工作。 你会需要理解那些工作的代码的。&lt;/p&gt;
&lt;p&gt;LISP值得学习的理由不同——最终掌握了它时你会得到丰富的启迪和经验。 这些经验会使你在以后的日子里成为一个更好的程序员，即使你实际上很少使用LISP本身。&lt;/p&gt;
&lt;p&gt;当然，实际上你最好五种都会（Python，Java，C/C++，Perl和LISP）。 除了是最重要的黑客语言外，它们还代表了截然不同的编程思路和方法，每种都会让你受益非浅。&lt;/p&gt;
&lt;p&gt;这里我无法给你完完全全的指导教会你如何编程——这是个复杂的技能。 但我可以告诉你，书本和上课也不能做到（最好的黑客中，有许多，也许 几乎都是自学成材的）。 你可以从书本上学到语言的特点——只是一些皮毛， 但
要使书面知识成为自身技能只能通过实践和虚心向他人学习。 因此要作到 （一）读代码及（二）写代码。&lt;/p&gt;
&lt;p&gt;学习如何编程就象学习用优美的自然语言写作一样。 最好的做法是读一些大师的名著，试着自己写点东西，再读
些，再写点，再读些，再写点…… 如此往复，直到你的文章达到你体会到的范文的简洁和力量。&lt;/p&gt;
&lt;p&gt;过去找到适合阅读的好的代码是困难的，因为几乎没有大型程序的源代码能让新手练手。 这种状况已经戏剧性地发生变化；开放源代码软件，编程工具和操作系统（全都由黑客写成）现在已经 随处可见。让我们在下一个话题中继续讨论……&lt;/p&gt;
&lt;h3&gt;2，得到一个开放源代码的Unix 并学会使用、运行它。&lt;/h3&gt;
&lt;p&gt;我假设你已经拥有或者能使用一台个人电脑（今天的孩子们真幸福 :-) ）。新手们能够朝学习黑客技能迈出的最基本的一步就是得到 一份Linux或BSD-Unix的一种，安装在个人电脑上，并运行它。&lt;/p&gt;
&lt;p&gt;没错，这世界上除了Unix还有其他操作系统。 但它们都是以二进制形式发布的——你无法读到它的源代码，也不可
能修改它。 尝试在运行DOS或Windows或MacOS的机器上学习黑客技术，就象是带着脚镣学跳舞。&lt;/p&gt;
&lt;p&gt;除此之外，Unix还是Internet的操作系统。 你可以学会上网却不知道Unix，但你不了解Unix就无法成为一名Internet黑客。 因此，今天的黑客文化在很大程度上是以Unix为中心的。（这点并不总是真的， 一些很早的黑客对此一直很不高兴，但Unix和Internet之间的联系已是如此之强， 甚至连Microsoft也无可奈何。）&lt;/p&gt;
&lt;p&gt;所以, 安装一套UNIX——我个人喜爱LINUX但还有其他种类的 （是的，你可以同时安装Linux及DOS/Windows在同一电脑上)。 学习它，使用它，配置它。用它在Internet上冲浪。阅读它的源代码。修改它的源代码。 你会得到比在Microsoft操作系统上更好的编程工具（包括C，LISP，Python及Perl）。 你会觉得乐趣无穷，学到在你成为大师之前意识不到的更多的知识。&lt;/p&gt;
&lt;p&gt;想知道更多关于学习Unix的信息，访问 The Loginataka 。&lt;/p&gt;
&lt;p&gt;想知道如何得到一份Linux，访问 我在哪里可以获得Linux 。 （译者：对于中文读者来讲，最简单的方式未过
于前往附近的D版/正版光盘店。）&lt;/p&gt;
&lt;p&gt;你可以在 www.bsd.org 找到BSD Unix的求助及其他资源。&lt;/p&gt;
&lt;p&gt;我有写一篇关于 Unix和Internet基础 的入门文章。&lt;/p&gt;
&lt;p&gt;（注：如果你是一个新手，我不推荐自己独立安装Linux或者BSD。 安装Linux的话，寻求本地Linux用户组的帮助；或联系 Open Projects Network 。 LISC维护着一些 IRC频道 ， 在那里你可以获得帮助。）&lt;/p&gt;
&lt;h3&gt;3，学会如何使用WWW和写HTML&lt;/h3&gt;
&lt;p&gt;黑客文化建造的大多东西都在你看不见的地方发挥着作用，帮助工厂、办公室和大学正常运转， 表面上很难看到它对非黑客的普通人的生活的影响。Web是一个大大的例外。 即便政客也同意，这个巨大耀眼的黑客玩具正在改变整个世界。 单是这个原因（还有许多其它的），你就需要学习掌握Web。&lt;/p&gt;
&lt;p&gt;这并不是仅仅意味着如何使用浏览器（谁都会），而是要学会如何写HTML， Web的标记语言。如果你不会编程，写HTML会教你一些有助于学习的思考习惯。 因此，先完成一个主页。（网上有很多好的教程； 这是一个 。)&lt;/p&gt;
&lt;p&gt;但仅仅拥有一个主页不能使你成为一名黑客。 Web里充满了各种网页。大多数是毫无意义的，零信息量垃圾——界面时髦的垃圾， 注意，垃圾的水准都类似（更多信息访问 The HTML Hell Page ）。&lt;/p&gt;
&lt;p&gt;要想有价值，你的网页必须有内容—— 它必须有趣或对其它黑客有帮助。这是下一个话题所涉及的……&lt;/p&gt;
&lt;h3&gt;4，如果你不懂实用性的英语，学习吧&lt;/h3&gt;
&lt;p&gt;作为一个美国人和一个以英语为母语的人，我以前很不情愿提到这点，免得成为 一种文化上的帝国主义。但相当多以其他语言为母语的人一直劝我指出这一点，那就是 英语是黑客文化和Internet的工作语言，你需要懂得以
便在黑客社区顺利工作。&lt;/p&gt;
&lt;p&gt;这一点千真万确。大概1991年的时候我就了解到许多黑客在技术讨论中使用英语，甚至当他们的母语都 相同，英语对他们而言只是第二语言的时候；据我知道的报导，当前英语有着比其他语言丰富得多的技术词汇， 因此是一个对于工作来说相当好的工具。 基于类似的原因，英文技术书籍的翻译通常不令人满意（如果有翻译的话）。&lt;/p&gt;
&lt;p&gt;Linus Torvalds，一个芬兰人，用英语注释他的代码（很明显这对他来说不是凑巧）。 他流利的英语成为他能够管理全球范围的Linux开发人员社区的重要因素。 这是一个值得学习的例子。&lt;/p&gt;
&lt;h2&gt;黑客文化中的地位&lt;/h2&gt;
&lt;p&gt;像大部分不涉及金钱的文化一样，黑客王国靠声誉运转。 你设法解决有趣的问题，但它们到底多有趣，你的解法有多好， 是要由那些和你具有同样技术水平的人或比你更厉害的人去评判的。&lt;/p&gt;
&lt;p&gt;相应地，当你在玩黑客游戏时，你得认识到你的分数主要靠其他黑客对你的技术的评价给出 （这就是为什么只有在其它黑客称你为黑客时，你才算得上是一名黑客）。 这个事实常会被黑客是一项孤独的工作这一印象所减弱；也会被另一个黑客文化的禁忌所减弱 （现在逐渐减弱但仍强大）：拒绝承认自我或外部评估与一个人的动力有关系。&lt;/p&gt;
&lt;p&gt;特别地，黑客王国被人类学家们称为一种奉献文化。 在这里你不是凭借你对别人的统治来建立地位和名望，也不是靠美貌，或拥有其他人想要的东西， 而是靠你的奉献。尤其是奉献你的时间，你的创造和你的技术成果。
要获得其他黑客的尊敬，基本上有五种事情你可以干：&lt;/p&gt;
&lt;h3&gt;1，写开放源代码软件&lt;/h3&gt;
&lt;p&gt;第一个（也是最集中的和传统的）是写些被其他黑客认为有趣或有用的程序， 并把程序源代码提供给整个黑客文化使用。&lt;/p&gt;
&lt;p&gt;（过去我们称之为“free software （自由软件）”， 但这却使很多不知 free 的精确含义的人感到困惑。 现在我们很多人，根据搜索引擎网页内容分析至少有2：1的比率，使用“ open-source ”software（开放源代码软件）这个词）。&lt;/p&gt;
&lt;p&gt;黑客王国里最受尊敬的偶像是那些写了大型的、好用的、具有广泛用途的软件， 并把它们公布出去，使得每人都
在使用他软件的人。&lt;/p&gt;
&lt;h3&gt;2，帮助测试并调试开放源代码软件&lt;/h3&gt;
&lt;p&gt;黑客也尊敬那些使用、测试开放源代码软件的人。 在这个并非完美的世界上，我们不可避免地要花大多数的开发时间在调试阶段。 这就是为什么任何有头脑的开放源代码的作者都会告诉你好的beta测试员 （知道如何清楚描述出错症状，很好地定位错误，能忍受快速发布中的bug， 并且愿意使用一些简单的诊断工具）象红宝石一样珍贵。 甚至他们中的一个能判断出哪个测试阶段是延长的， 哪个是令人精疲力尽的噩梦，哪个只是一个有益的小麻烦。&lt;/p&gt;
&lt;p&gt;如果你是个新手，试着找一个你感兴趣的正在开发的程序，做一个好的beta测试员。 你会自然地从帮着测试，进
步到帮着抓臭虫，到最后帮着改程序。 你会从中学到很多，并且与未来会帮你的人结下友谊。&lt;/p&gt;
&lt;h3&gt;3，公布有用的信息&lt;/h3&gt;
&lt;p&gt;另一个好事是收集整理有用有趣的信息做成网页或文档如FAQ列表，且让他们容易获得。&lt;/p&gt;
&lt;p&gt;主要技术FAQ的维护者受到几乎同其他开放源代码的作者一样多的尊敬。&lt;/p&gt;
&lt;h3&gt;4，帮助维护基础设施的运转&lt;/h3&gt;
&lt;p&gt;黑客文化（还有Internet的工程方面的发展，就此而言）是靠自愿者运转的。 要使Internet能正常工作，就要有大量枯燥的工作不得不去完成——管理mail list，新闻组，维护大型软件库，开发RFC和其它技术标准等等。
做这类事情的人会得到很多尊敬，因为每人都知道这些事情是十分花时间又不象编程那样好玩。 做这些事情需要奉献精神。&lt;/p&gt;
&lt;h3&gt;5，为黑客文化本身服务&lt;/h3&gt;
&lt;p&gt;最后，你可以为这个文化本身做宣传（例如，象我这样，写一个“如何成为黑客”的正面的教程 :-) ） （译者：不知道Barret把它翻成中文算不算？）。 这并非一定要在你已经在这个圈子呆了很久，因以上四点中的某点而出名，有一定声誉后才能去做。&lt;/p&gt;
&lt;p&gt;黑客文化没有领袖。精确地说，它确实有些文化英雄、部落长者、历史学家和发言人。 若你在这圈内呆的够长，你或许成为其中之一。 记住：黑客们不相信他们的部落长者的自夸的炫耀， 因此大举追求这种名誉是危险的。与其奋力追求，不如先摆正自己的位置 等它自己到你的手中——那时则要做到谦虚和优雅。&lt;/p&gt;
&lt;h2&gt;黑客和书呆子(Nerd)的联系&lt;/h2&gt;
&lt;p&gt;同流行的迷思相反，做一名黑客并不一定要你是个书呆子。 但它确实有帮助，而且许多黑客事实上是书呆子。 做
一个深居简出的人有助于你集中精力进行十分重要的事情，如思考和编程。&lt;/p&gt;
&lt;p&gt;因此，很多黑客都愿意接受“书呆子”这个外号， 更有甚者使用更尖刻的“geek（怪人）”一词并引以为豪—— 这是一种宣布他们独立于主流社会的声明方式。访问 The Geek Page 参加更多的讨论。&lt;/p&gt;
&lt;p&gt;如果你能集中足够的精力做好黑客工作同时还能有正常的生活，这很好。 现在作到这一点比我在1970年代是新手的时候要容易的多； 如今主流文化对技术怪人要友善的多。 甚至有越来越多的人意识到黑客通常是很好的恋人和配偶的材料。&lt;/p&gt;
&lt;p&gt;如果你因为生活上不如意而迷上做黑客，那也没什么——至少你不会分神了。 或许以后你会找到自己的另一半。
风格的意义&lt;/p&gt;
&lt;p&gt;重申一下，作为一名黑客，你必须进入黑客精神之中。 当你不在计算机边上时，你仍然有很多对黑客工作有帮助的事情可做。 它们并不能替代真正的编程（没有什么能），但很多黑客都那么做， 并感到它们与黑客的本质存在某些基本的连系。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;学会流畅地用母语写作。尽管程序员不能写好文章的错误看法相当普遍， 但是有令人惊讶数目的黑客（包括所有我知道的最棒的）都是不错的作家。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;阅读科幻小说。参加科幻小说讨论会。（一个碰到黑客和未来会成为黑客的人的好方法）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;学禅，并且/或者练功习武。（精神修炼看来是惊人相似。）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;练就能分析音乐的听觉，学会鉴赏特别的音乐。学会玩某种乐器，或唱歌。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提高对双关语、文字游戏的鉴赏能力。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些事情，你已经做的越多，你就越是天生做黑客的材料。 至于为什么偏偏是这些事情，原因并不完全清楚， 但它们都涉及用到左－右脑能力的综合，这似乎是关键所在 （黑客们既需要清晰的逻辑思维，有时又需要偏离逻辑
跳出问题的表象）。&lt;/p&gt;
&lt;p&gt;最后，还有一些不要去做的事情。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;不要使用愚蠢的，哗众取宠的ID或昵称。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不要卷入Usenet（或其他地方的论坛）的骂战。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不要自称为“cyberpunk（网络叛客）”，也不要浪费时间和那些人打交道。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不要让你寄出的Email或张贴的帖子充满错误的拼写和乱七八糟的语法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;做以上的事情，只会招来嘲笑。黑客们个个记忆超群—— 你将需要数年的时间让他们忘记你犯下的错误。&lt;/p&gt;
&lt;p&gt;网名的问题值得深思。将身份隐藏在虚假的名字后是骇客、解密者、d00dz 及其他低等生物幼稚愚蠢的行为特点。黑客不会做这些事； 他们对他们所作的感到骄傲，而且乐于人们将作品与他们的 真名相联系。 因此, 若你现在用假名，放弃它。在黑客文化里它会令你你失败的。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">lizherui</dc:creator><pubDate>Tue, 06 Aug 2013 00:00:00 +0800</pubDate><guid>tag:www.lizherui.com,2013-08-06:pages/2013/08/06/become_a_hack.html</guid><category>黑客</category><category>编程</category></item><item><title>Java设计模式在Common Lisp中的体现</title><link>http://www.lizherui.com/pages/2013/08/04/lisp_design_patterns.html</link><description>&lt;p&gt;最近在进一步学习Java的过程中，我愈发感到Java把面向对象的编程思想玩到了登峰造极的地步。而Java中最能表现面向对象编程思想的，就是大名鼎鼎的设计模式了。&lt;/p&gt;
&lt;p&gt;这是Wikipedia中对设计模式的定义：设计模式并不直接用来完成代码的编写，而是描述在各种不同情况下，要怎么解决问题的一种方案。面向对象设计模式通常以类型或对象来描述其中的关系和相互作用，但不涉及用来完成应用程序的特定类型或对象。设计模式能使不稳定依赖于相对稳定、具体依赖于相对抽象，避免会引起麻烦的紧耦合，以增强软件设计面对并适应变化的能力。&lt;/p&gt;
&lt;p&gt;在学习了一些设计模式后，我们会发现这23种设计模式都围绕着以下三大基本原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;中意于组合而不是继承。&lt;/li&gt;
&lt;li&gt;依赖于接口而不是实现。&lt;/li&gt;
&lt;li&gt;高内聚，低耦合。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不过，除了以上这些收获和感悟以外，我发现了一些更让人感兴趣的东西，这也是这篇文章马上要探讨的重点——Java设计模式在Common lisp中的体现。&lt;/p&gt;
&lt;p&gt;Java和Common lisp, 前者作为OO的代表，喜欢玩类和对象；后者作为Functional Programming的代表，喜欢玩函数和闭包。乍一看它俩应该风马牛不相及，井水不犯河水，但实际上我们会惊讶地发现Java设计模式中有着太多Common Lisp的对照，这种现象让人越来越强烈地感觉：软件设计虽然有众多的门派、风格和表现形式，但总体思想上似乎是殊途同归的，比如构造抽象屏障和提高抽象层次。&lt;/p&gt;
&lt;p&gt;Java至少有16种设计模式能对应到Common Lisp中，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="aaa" src="https://lh6.googleusercontent.com/--fbXkQDQfg0/Uf56NGxglbI/AAAAAAAAAGo/vpbBtYGAoxM/w414-h292-no/1.png" /&gt;&lt;/p&gt;
&lt;p&gt;Talk is cheap, let me show you the code.&lt;/p&gt;
&lt;p&gt;我们先来看看Singleton模式。&lt;/p&gt;
&lt;p&gt;Singleton模式有一个形象的比喻：Singleton就像追妹子一样，你不能大街上随便拉一个妹子就说是我对象，也不能自己做一个妹子出来说是自己对象。只能通过某种方法（追妹子），来产生一个对象。同时在调用这个方法的时候，会对你是否已经有对象进行检查。如果有，那么方法会直接返回，或者产生一个异常（抽你一巴掌，或者new Exception(”流氓!”)），从而保证你只有一个对象。&lt;/p&gt;
&lt;p&gt;这是一个线程安全的Java单例模式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt;
{
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt; &lt;span class="n"&gt;myInstance&lt;/span&gt;;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt; &lt;span class="n"&gt;getInstance&lt;/span&gt;()
    {
        &lt;span class="k"&gt;if&lt;/span&gt; (&lt;span class="n"&gt;myInstance&lt;/span&gt; == &lt;span class="n"&gt;null&lt;/span&gt;)
        {
            &lt;span class="n"&gt;synchronized&lt;/span&gt;(&lt;span class="n"&gt;Singleton&lt;/span&gt;.&lt;span class="k"&gt;class&lt;/span&gt;)
            {
                &lt;span class="k"&gt;if&lt;/span&gt; (&lt;span class="n"&gt;myInstance&lt;/span&gt; == &lt;span class="n"&gt;null&lt;/span&gt;)
                {
                    &lt;span class="n"&gt;myInstance&lt;/span&gt; = &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt;();
                }
            }
        }

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;myInstance&lt;/span&gt;;
    }

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt;()
    {
        // &lt;span class="n"&gt;Constructor&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;goes&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt;.
    }

}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个例子简单明了，核心思想是利用Java中函数 的访问权限控制实现单例。&lt;/p&gt;
&lt;p&gt;但是在Common Lisp中，没有访问权限控制，那怎么去实现单例呢？这就变得非常有意思了。不仅是Common Lisp，Python、Ruby等动态语言中都有一种非常强悍的编程机制——元编程。&lt;/p&gt;
&lt;p&gt;这是Wikipedia中对元编程的定义：元编程是指某类计算机程序的编写，这类计算机程序编写或者操纵其它程序（或者自身）作为它们的数据，或者在运行时完成部分本应在编译时完成的工作。多数情况下，与手工编写全部代码相比，程序员可以获得更高的工作效率, 或者给与程序更大的灵活度去处理新的情形而无需重新编译。&lt;/p&gt;
&lt;p&gt;我们需要用到元编程思想中的一个重要应用——元类，即类的模板，元类的实例也是类。&lt;/p&gt;
&lt;p&gt;我们先定义一个元类:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(defclass singleton-class (standard-class)
    ((instance :initform nil)))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这段代码阻止程序员直接实例化singleton-class，有点儿像Java的抽象类。&lt;/p&gt;
&lt;p&gt;然后为了严谨，我们对这个元类进行一些继承方面的限定。&lt;/p&gt;
&lt;p&gt;允许这个元类继承标准类：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(defmethod validate-superclass ((class singleton-class)                                                                 (superclass standard-class))    
t)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;允许其它元类继承这个元类：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(defmethod validate-superclass ((class singleton-class)                                                                 (superclass singleton-class))   
t)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不允许其它标准类继承这个元类：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(defmethod validate-superclass ((class standard-class)                                                                  (superclass singleton-class))
nil)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后定义初始化实例函数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(defvar *singleton-classes* &amp;#39;())

(defmethod initialize-instance :after ((c singleton-class) &amp;amp;key)
  (pushnew c *singleton-classes*))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再定义真正的make-instance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(defmethod make-instance ((class singleton-class)
                      &amp;amp;key)
  (with-slots (instance) class
    (or instance
        (setf instance (call-next-method)))))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;还可以定义一个reset-singleton-classes：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(defun reset-singleton-classes ()
  ;; This means you will get new singletons from now on.
  (loop for c in *singleton-classes*
        do (setf (slot-value c &amp;#39;instance) nil)))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;元类完事了，我们定义两个标准类：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(defclass foo1()
  ()
  (:metaclass singleton-class))

(defclass foo2 ()
  ()
  (:metaclass singleton-class))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;让我们测试一下，载入刚刚写好的test.lsp：&lt;/p&gt;
&lt;p&gt;&lt;img alt="2" src="https://lh5.googleusercontent.com/-vhKXWOXzcBw/Uf56NAb3rlI/AAAAAAAAAGs/sR4IKun665k/w415-h297-no/2.png" /&gt; &lt;/p&gt;
&lt;p&gt;测试一下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="3" src="https://lh3.googleusercontent.com/-eeLFQSEwkOU/Uf56NPKq97I/AAAAAAAAAGw/jE0cTtiFY6g/w172-h108-no/3.png" /&gt; &lt;/p&gt;
&lt;p&gt;没有问题，我们还可以试一试刚才写的reset-singleton-classes：&lt;/p&gt;
&lt;p&gt;&lt;img alt="4" src="https://lh5.googleusercontent.com/-ROPqd87viOk/Uf56OKLi-xI/AAAAAAAAAG8/aQnvijRXTvQ/w180-h99-no/4.png" /&gt; &lt;/p&gt;
&lt;p&gt;果然，foo1的单个实例被清空重建了。&lt;/p&gt;
&lt;p&gt;小结：Common Lisp中的元类，有一点像Java中的抽象类，比如不能被实例化，可以被继承等等。但元类跟抽象类仍然有着本质的不同：元类的实例是类，不是对象,于是能动态地创建类，更加灵活。Singleton模式具体的实现机制，是在元类中维护了一个内部队列来达到目的。&lt;/p&gt;
&lt;p&gt;张教主有这样一句名言：元编程是一种黑魔法，正派人士都很畏惧。&lt;/p&gt;
&lt;p&gt;我们再来看看工厂模式。&lt;/p&gt;
&lt;p&gt;下面是一个典型的Java工厂模式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;abstract class Pizza {
    public abstract int getPrice(); // count the cents
}

class HamAndMushroomPizza extends Pizza {
    public int getPrice() {
        return 850;
    }
}

class DeluxePizza extends Pizza {
    public int getPrice() {
        return 1050;
    }
}

class HawaiianPizza extends Pizza {
    public int getPrice() {
        return 1150;
    }
}

class PizzaFactory {
    public enum PizzaType {
        HamMushroom,
        Deluxe,
        Hawaiian
    }

public static Pizza createPizza(PizzaType pizzaType) {
    switch (pizzaType) {
        case HamMushroom:
            return new HamAndMushroomPizza();
        case Deluxe:
            return new DeluxePizza();
        case Hawaiian:
            return new HawaiianPizza();
    }
    throw new IllegalArgumentException(&amp;quot;The pizza type &amp;quot; + pizzaType + &amp;quot; is not recognized.&amp;quot;);
    }
}

class PizzaLover {
    /*
     * Create all available pizzas and print their prices
     */
    public static void main (String args[]) {
        for (PizzaFactory.PizzaType pizzaType : PizzaFactory.PizzaType.values()) {
            System.out.println(&amp;quot;Price of &amp;quot; + pizzaType + &amp;quot; is &amp;quot; + PizzaFactory.createPizza(pizzaType).getPrice());
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出结果：&lt;/p&gt;
&lt;p&gt;Price of HamMushroom is 850&lt;/p&gt;
&lt;p&gt;Price of Deluxe is 1050&lt;/p&gt;
&lt;p&gt;Price of Hawaiian is 1150&lt;/p&gt;
&lt;p&gt;在Common Lisp中，类和函数都是first class types ，即一等公民：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以被存储到变量中。&lt;/li&gt;
&lt;li&gt;可以作为参数传给其它。&lt;/li&gt;
&lt;li&gt;可以作为函数的返。&lt;/li&gt;
&lt;li&gt;可以在运行时被创造。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此，Common Lisp实现工厂模式就显得简单粗暴了，或者说，根本用不着工厂模式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(defclass pizza ()
  ((price :accessor price)))

(defclass ham-and-mushroom-pizza (pizza)
  ((price :initform 850)))

(defclass deluxe-pizza (pizza)
  ((price :initform 1050)))

(defclass hawaiian-pizza (pizza)
  ((price :initform 1150)))

(defparameter *pizza-types*
  (list &amp;#39;ham-and-mushroom-pizza
        &amp;#39;deluxe-pizza
        &amp;#39;hawaiian-pizza))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;载入测试一下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="5" src="https://lh5.googleusercontent.com/-YNmX58cxcDo/Uf56OIKW--I/AAAAAAAAAHA/W-vT08Kmtwo/w324-h112-no/5.png" /&gt;&lt;/p&gt;
&lt;p&gt;小结：Common Lisp中由于函数是一等公民的缘故，相对于Java中工厂模式的实现要简单的多，不需要额外建一个工厂类，可以随心所欲地玩。函数式语言相当于OO语言来说，确实有一个优点——可以操纵的单元粒度更小更细，所以更加灵活，同时也更加容易失控。&lt;/p&gt;
&lt;p&gt;最后，让我们看看迭代器模式，首先是Java中的实现：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.ArrayList&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.List&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;interface&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;hasNext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConcreteIterator&lt;/span&gt; &lt;span class="n"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ConcreteIterator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;hasNext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()){&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hasNext&lt;/span&gt;&lt;span class="p"&gt;()){&lt;/span&gt;
            &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;interface&lt;/span&gt; &lt;span class="n"&gt;Aggregate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt; &lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConcreteAggregate&lt;/span&gt; &lt;span class="n"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Aggregate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt; &lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ConcreteIterator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;Aggregate&lt;/span&gt; &lt;span class="n"&gt;ag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ConcreteAggregate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;ag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;小明&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;ag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;小红&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;ag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;小刚&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Iterator&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hasNext&lt;/span&gt;&lt;span class="p"&gt;()){&lt;/span&gt;
            &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;核心思想是在内部封装一个Arraylist，只对外暴露Iterator的基本接口，跟C++ STL中迭代器的设计基本一致。&lt;/p&gt;
&lt;p&gt;在Common Lisp中实现迭代器，我们只需要定义宏：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;defmethod&lt;/span&gt; &lt;span class="nx"&gt;make&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(lambda (message)&lt;/span&gt;
&lt;span class="s1"&gt;      (case message&lt;/span&gt;
&lt;span class="s1"&gt;    (:next&lt;/span&gt;
&lt;span class="s1"&gt;     (let ((r (first collection)))&lt;/span&gt;
&lt;span class="s1"&gt;       (setf collection (cdr collection))&lt;/span&gt;
&lt;span class="s1"&gt;       (values r (null collection))))&lt;/span&gt;
&lt;span class="s1"&gt;    (:finished-p&lt;/span&gt;
&lt;span class="s1"&gt;     (null collection)))))&lt;/span&gt;

&lt;span class="s1"&gt;(defmethod cursor-next ((cursor function))&lt;/span&gt;
&lt;span class="s1"&gt;  (funcall cursor &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;defmethod&lt;/span&gt; &lt;span class="nx"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;finished&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;cursor&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;funcall&lt;/span&gt; &lt;span class="nx"&gt;cursor&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;finished&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测试一下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="7" src="https://lh3.googleusercontent.com/-nHpRPpSXzts/Uf56Obb5ufI/AAAAAAAAAHI/4lvgkQWPUBo/w415-h164-no/6.png" /&gt;&lt;/p&gt;
&lt;p&gt;小结：Common Lisp中由于自带序列，对迭代天然支持，所以相当于Java会更加简，天生的宏机制表现得畅快淋漓。&lt;/p&gt;
&lt;p&gt;总结：无论在Java还是Common Lisp中，设计模式虽然有不同的表现形式，但目标都一致的：构造抽象屏障，控制抽象层次，降低模块之间的耦合，尽量编写通用的组件。由于函数在Common Lisp中是一等公民的缘故，因此相对Java来说，Common Lisp的操作粒度更小，我们可以构造各种精巧的小函数并利用宏机制让各个小函数互相组合起来工作，显得更加简洁、灵活和强悍。但同时，这种特点也容易使整个项目的可控性受到威胁。而且Common Lisp这种函数式的数学思维，确实显得过于抽象了，不如Java的OO机制来得更加直观、更加贴近生活。&lt;/p&gt;
&lt;p&gt;在学习Java设计模式的过程中，除了开阔了自己的眼界，同时也勾起了我对函数式编程思想的美好怀念以及继续在课余时间学习SICP(&lt;a href="http://book.douban.com/subject/1148282"&gt;http://book.douban.com/subject/1148282&lt;/a&gt;)的动力。&lt;/p&gt;
&lt;p&gt;以前写Python的时候，我特别喜欢那4把宝剑——lambda、map、reduce、filter带来的随心所欲的编程快感。Java的设计模式对我开启了另一个世界的门——这个世界的疆域更加广阔，规则更加严谨，层次更加明显。&lt;/p&gt;
&lt;p&gt;最后，让我们用一个迷人的小故事来结束本文吧：&lt;/p&gt;
&lt;p&gt;在 ILC 2002 大会上前Lisp大神，当今的Python倡导者Peter Norvig，由于某些原因，做一个类似于马丁路德在梵蒂冈宣扬新教的主题演讲，因为他在演讲中大胆地声称Python就是一种Lisp。&lt;/p&gt;
&lt;p&gt;讲完后进入提问环节，出乎我意料的是，Peter点了我过道另一侧，靠上面几排座位的一个老头，他衣着皱褶，在演讲刚开始的时候踱步进来，然后就靠在了那个座位上面。&lt;/p&gt;
&lt;p&gt;这老头满头凌乱的白发，邋遢的白胡须，像是从旅行团中落下的游客，已经完全迷路了，闲逛到这里来歇歇脚，随便看看我们都在这里干什么。我的第一个念头是，他会因为我们的奇怪的话题感到相当失望；接着，我意识到这位
老头的年纪，想到斯坦福就在附近，而且我想那人也在斯坦福 —— 难道他是……&lt;/p&gt;
&lt;p&gt;“嗨，John，有什么问题？” Peter说。&lt;/p&gt;
&lt;p&gt;虽然这只是10个字左右的问题，我不会假装自己记住了Lisp之父约翰麦卡锡说的每一个字。他在问Python程序能
不能像处理数据一样，优雅地处理Python代码。&lt;/p&gt;
&lt;p&gt;“不行。John, Python做不到。” Peter就回答了这一句，然后静静地等待，准备接受教授的质疑，但老人没有再说什么了。此时，无语已胜千言。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">lizherui</dc:creator><pubDate>Sun, 04 Aug 2013 00:00:00 +0800</pubDate><guid>tag:www.lizherui.com,2013-08-04:pages/2013/08/04/lisp_design_patterns.html</guid><category>java</category><category>lisp</category><category>设计模式</category></item><item><title>今天我终于有了自己的独立域名</title><link>http://www.lizherui.com/pages/2013/08/01/personal_domain.html</link><description>&lt;p&gt;今天折腾了半天，终于搞定了自己的独立域名：&lt;a href="http://www.lizherui.com"&gt;http://www.lizherui.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;整个过程颇为曲折：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;去&lt;a href="https://www.godaddy.com"&gt;https://www.godaddy.com&lt;/a&gt;上用支付宝花80多块钱购买为期一年的顶级域名，并去修改Nameservers为这两个地址：f1g1ns1.dnspod.net、f1g1ns2.dnspod.net。&lt;/li&gt;
&lt;li&gt;去&lt;a href="https://www.dnspod.cn"&gt;https://www.dnspod.cn&lt;/a&gt;上添加新域名，并申请一条A记录指向Github Pages的ip:207.97.227.245；&lt;/li&gt;
&lt;li&gt;在Pelican主目录新建CNAME文件，添上刚刚申请的域名：www.lizherui.com。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有了独立域名后，感觉非常爽，更加坚定了好好打理个人博客的决心。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">lizherui</dc:creator><pubDate>Thu, 01 Aug 2013 00:00:00 +0800</pubDate><guid>tag:www.lizherui.com,2013-08-01:pages/2013/08/01/personal_domain.html</guid><category>域名</category><category>godaddy</category></item><item><title>爬取校招信息</title><link>http://www.lizherui.com/pages/2013/07/31/spider.html</link><description>&lt;p&gt;抓取北邮人论坛和水木社区校招信息的爬虫程序, 直接运行main.py即可在本机(&lt;a href="http://127.0.0.1:8888"&gt;http://127.0.0.1:8888&lt;/a&gt;)访问，非常简洁，可以扩展。&lt;/p&gt;
&lt;p&gt;此外，已经增加手机短信通知功能，移动、联通、电信都可以用。&lt;/p&gt;
&lt;p&gt;Talk is cheap, show you the code:&lt;a href="https://github.com/lizherui/spider_python"&gt;https://github.com/lizherui/spider_python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Enjoy it.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">lizherui</dc:creator><pubDate>Wed, 31 Jul 2013 00:00:00 +0800</pubDate><guid>tag:www.lizherui.com,2013-07-31:pages/2013/07/31/spider.html</guid><category>python</category><category>爬虫</category></item><item><title>编辑器与IDE</title><link>http://www.lizherui.com/pages/2013/07/25/editor_and_ide.html</link><description>&lt;p&gt;虽然eclim很强悍，但由于它并没有集成任何的java debug功能，因此用vim+eclim的组合开发java仍然显得力不从心。&lt;/p&gt;
&lt;p&gt;我最终决定回到eclipse的怀抱中。同时，出于对逐渐丧失vim武功的担忧，我决定使用eclipse+viplugin的组合：编辑代码使用vim的指法，其它事情全部交给eclipse。&lt;/p&gt;
&lt;p&gt;这样用了一段时间，节奏还不错，而且eclipse一些强大的功能让我刮目相看，并让我开始反思之前对待编辑器与IDE的态度。&lt;/p&gt;
&lt;p&gt;IDE里面确实蕴含了比普通文本编辑器高级很多的技术。IDE会对程序文本进行真正的解析，之后才开始分析里面的结构。它们的“跳转到定义”一般都是很精确的跳转，而不是像文本编辑器那样瞎猜。&lt;/p&gt;
&lt;p&gt;此外，IDE代码补全的精准度与速度都远远超过了vim的任何插件；IDE对于java的接口与实现、类与类的继承关系、反射等稍高级的功能都支持得非常好。&lt;/p&gt;
&lt;p&gt;vim在这些方面确实做得不好，也不可能做得好。&lt;/p&gt;
&lt;p&gt;这样说来，vim的唯一优势就只是它那极其符合人体工程学的指法带来的行云流水般的操作快感了。&lt;/p&gt;
&lt;p&gt;不像php, python等所见即所得的解释性语言，java这种编译型的语言，若通过打日志来调试，那么每加一条调试用的日志代码，就要重新编译一次，实在是太低效了。而eclipse的调试功能确实是太强大了，调试过程中每个变量的值也都是清清楚楚。&lt;/p&gt;
&lt;p&gt;很多长期使用vim/emacs的人都容易对IDE抱有或多或少的偏见。没错，开发shell, php, python, ruby这样的解释性语言，用vim/emacs确实非常合适，也能满足需求，相比之下用IDE开发它们就会显得有些笨拙。&lt;/p&gt;
&lt;p&gt;但是最近开发java的经历让我逐渐冷静了下来，开始仔细地反思这件事情。就像没有万能的编程语言一样，也没有万能的编辑器。vim很强悍，emacs也很厉害，但是它俩在面对java这样的语言时，确实无法跟eclipse相提并论。&lt;/p&gt;
&lt;p&gt;eclipse能让java程序员的头脑从琐碎的细节里面解脱出来，所以我们能够更加专注于程序本身的语义和算法，这样我们能写出更加优美和可靠的程序。这就是我用eclipse写java程序的时候相对于vim的感觉。我感觉到自己能够看见程序背后所表现的模型，而不只是看到程序的文本和细节。&lt;/p&gt;
&lt;p&gt;最后我想说的是，eclipse这件事情对我触动很大。我开始渐渐认可这样的观点：程序员对诸如编程语言、编辑器这类事物产生宗教般的信仰或偏见确实是没有必要的。我们应该更加多元化地发展，学会尊重别的技术和别的事物，学会去发现、认可每件技术的优势与劣势。&lt;/p&gt;
&lt;p&gt;天下武功，确实没有高低之分；只有习武之人，才有强弱之别。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">lizherui</dc:creator><pubDate>Thu, 25 Jul 2013 00:00:00 +0800</pubDate><guid>tag:www.lizherui.com,2013-07-25:pages/2013/07/25/editor_and_ide.html</guid><category>编辑器</category><category>eclipse</category><category>vim</category></item></channel></rss>